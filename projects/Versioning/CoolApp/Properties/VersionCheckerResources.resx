<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="VersionCheckerWindow_DownloadCanceled" xml:space="preserve">
    <value>The download was canceled.</value>
    <comment>Text displayed in the body of the VersionChecker window when the user canceled the download.</comment>
  </data>
  <data name="VersionCheckerWindow_Downloading" xml:space="preserve">
    <value>Downloading {0} {1}:    {2:#,# kB} / {3:#,# kB}</value>
    <comment>Text displayed in the body of the VersionChecker window to offer information about the downloading progress.
param 0 - The name of the application.
param 1 - The version that is downloaded.
param 2 - kB received.
param 3 - total kB expected to be received.</comment>
  </data>
  <data name="VersionCheckerWindow_NoNewVersion" xml:space="preserve">
    <value>There is no new version available.</value>
    <comment>Text displayed in the body of the VersionChecker window if no newer version is available.</comment>
  </data>
  <data name="VersionCheckerWindow_OverwriteQuestion_Title" xml:space="preserve">
    <value>Overwrite</value>
    <comment>The title of the dialog requesting the user to overwrite the existing downloaded file.</comment>
  </data>
  <data name="VersionCheckerWindow_StatusText_Error" xml:space="preserve">
    <value>Error</value>
    <comment>Status text displayed in the header of the VersionChecker window if an error was encountered while checking for a newer version.</comment>
  </data>
  <data name="VersionCheckerWindow_StatusText_NoNewVersion" xml:space="preserve">
    <value>No new version available</value>
    <comment>Status text displayed in the header of the VersionChecker window if no newer version is available.</comment>
  </data>
  <data name="VersionCheckerWindow_DownloadError" xml:space="preserve">
    <value>Error downloading the new version.
Error message: {0}</value>
    <comment>Message displayed in the VersionChecking window if the download of the new version failed.
param 0 - the error message</comment>
  </data>
  <data name="VersionCheckerWindow_DownloadSuccess_Short" xml:space="preserve">
    <value>SUCCESS !!!
The file was successfully downloaded. Enjoy! :)</value>
    <comment>Message displayed in the VersionChecking window if the download of the new version was successful. This message is displayed in the case the downloader did NOT provided the path where the file was saved.</comment>
  </data>
  <data name="VersionCheckerWindow_DownloadSuccess" xml:space="preserve">
    <value>SUCCESS !!!
The file was successfully downloaded to
{0}

Note! Please be sure Azzul is not running while the new version is installing.</value>
    <comment>Message displayed in the VersionChecking window if the download of the new version was successful.
param 0 - the location on disk where the file was downloaded.</comment>
  </data>
  <data name="VersionCheckerWindow_Download_SelectDestinationDirectory" xml:space="preserve">
    <value>Select the directory where to download the new version.</value>
    <comment>Message displayed in the FolderBrowser window requesting the user to select a directory where to download the new version of the Azzul.</comment>
  </data>
  <data name="VersionCheckerWindow_OverwriteQuestion" xml:space="preserve">
    <value>The file "{0}" already exists. Overwrite?</value>
    <comment>The question displayed to the user if the file that is going to be downloaded already exists in the specified location. The user has to choose if the file should be overwritten.
param 0 - the name of the file that already exists on disk.</comment>
  </data>
  <data name="VersionCheckerWindow_StatusText_NewVersionAvailable" xml:space="preserve">
    <value>New version is available: {0}</value>
    <comment>Text displayed as status in the VersionChecker window if a new version is available.
param 0 - the new version number.</comment>
  </data>
  <data name="VersionCheckerWindow_StatusText_Checking" xml:space="preserve">
    <value>Checking for new version...</value>
    <comment>Text displayed as status in the VersionChecker window while checking for a new version.</comment>
  </data>
  <data name="VersionCheckerWindow_StatusText_ErrorChecking" xml:space="preserve">
    <value>Error while checking for new version</value>
    <comment>Text displayed as status in the VersionChecker window if an error occured while checking for a new version.</comment>
  </data>
  <data name="VersionCheckerWindow_StatusText_DownloadError" xml:space="preserve">
    <value>Error downloading the new version.</value>
    <comment>Text displayed as status in the VersionChecker window if the download of the new version failed.</comment>
  </data>
  <data name="VersionCheckerWindow_Error_AlreadyDownloading" xml:space="preserve">
    <value>Another file is already downloading.</value>
    <comment>Error message displayed to the user when he tries to download the new version, but the download is already started,</comment>
  </data>
  <data name="VersionCheckerWindow_VersionDescription" xml:space="preserve">
    <value>Version description:
{0}</value>
    <comment>Message displayed in the VersionChecker window containing the description of the new version.
param 0 - the description of the new version.</comment>
  </data>
  <data name="VersionCheckerWindow_VersionDescriptionNoDownload" xml:space="preserve">
    <value>Version description:
{0}

For download please visit {1}</value>
    <comment>Message displayed in the VersionChecker window containing the description of the new version. This message is displayed only if the download url was not provided.
param 0 - the description of the new version.</comment>
  </data>
  <data name="VersionCheckerWindow_Checking" xml:space="preserve">
    <value>Checking url: {0}</value>
    <comment>Text displayed in the VersionChecker window while the checking for a new version is started.
param 0 - the url where Azzul is checking for a new version.</comment>
  </data>
</root>